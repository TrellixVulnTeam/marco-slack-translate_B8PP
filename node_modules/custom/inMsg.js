class inMessage {
    constructor(payload) {
        this.payload = payload;
    }
    getPayload() {
        return this.payload;
    }
    getText() {
	return this.payload.text;
    }
    getChannel() {
	return this.payload.channel;
    }
    getURL(slack_token) {
	var WebClient = require('@slack/client').WebClient;

	var web = new WebClient(slack_token);

	web.files.sharedPublicURL(this.payload.file.id, function shareCb(err, info) {
	  if (err) {
	    console.log('Error:', err);
	  } else {
		//console.log(info);
		var request = require('request');

		request(info.file.permalink_public, function (error, response, body) {
		  //console.log('error:', error); // Print the error if one occurred 
		  //console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received 
		  //console.log('body:', body); // Print the HTML for the Google homepage. 
		  var re=new RegExp("<img src=\"https://files.slack.com/files-pri/.*\">");
		  var result=re.exec(body);
		  imgURL=result[0].substr(result[0].indexOf("\"") + 1);
		  imgURL=imgURL.substr(0, imgURL.lastIndexOf("\""));
		  this.imgURL=imgURL;
		});
  	  }
	});
	return this.imgURL;
    }
    getID() {
	return this.payload.file.id;
    }
    getSize() {
	return this.payload.file.size;
    }
    getMsgType() {
	if (typeof this.payload.subtype !== 'undefined') {
	   return this.payload.subtype;
	} else { 
	   return 'noSubtype';
	} 
    }
}

module.exports = inMessage;
